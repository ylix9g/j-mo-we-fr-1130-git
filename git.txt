Git - отдельная программа выполняющая функции системы контроля версий, важно
отметить взаимодействие с программой Git производиться исключительно путём
выполнения команда в терминала (командной строке). Система контроля версий Git
позволяет работать с историей изменений отслеживаемой относительно репозитория
(репозиторием называется папка относительно которой отслеживаются изменения и
хранится их история), история изменений может состоять из множества записанных
в неё точек сохранений (commit-ы). Помимо хранения истории изменений Git
предоставляет инструменты позволяющие удобно реализовать командную разработку
(единовременную работу над проектом нескольких разработчиков), таким
инструментом являются ветки, ветка представляет собой отдельно взятое рабочее
пространство существующее в контексте репозитория со своей историей изменения
которая пересекается с остальными лишь от части (каждая ветка является
изолированным рабочим пространством для отдельно взятого разработчика). При
работе с ветками со временем встаёт вопрос их объединения в одну цельную ветку,
Git предоставляет для такой операции инструмент под названием слияние.
Перечисленные возможности это только часть того что умеет Git.

`git --version` - выводит версию установленной программы Git если она есть.

`git init` - инициализирует новый репозиторий в папке на которой сфокусирован
терминал в момент выполнения команды.

`git status` - выводит информацию об актуальном состоянии репозитория на момент
выполнения команду, к выводимой информации относится название текущей ветки,
состояние файлов репозитория и так далее.

`git add <files>` - добавляет файл для его дальнейшей записи в ближайшую точку
сохранения (commit), при формировании точки сохранения добавленный файл будет
записан в историю в том виде в котором он был на момент выполнения команды git
add (изменения внесённые в файл после выполнения данном команды не будут
записаны в историю).

`git config user.name/git config user.email` - команды позволяющие записать в
конфигурацию репозитория имя и email автора который будет вносить изменения.

`git commit -m <message>` - записывает в историю изменений новую точку
сохранения с файлами добавленными ранее через git add и небольшим пояснительным
сообщением.

В проекте часто фигурируют различные файлы наличие которых в репозитории не
является оптимальным, к таким файлам относятся различные локальные
конфигурации (.idea, *.iml, .vscode и так далее), результаты сборки проекта
(папки наподобие build, target, out и так далее) и различные другие ресурсы
которые стоит перечислить в файле с названием .gitignore, всё содержимое
данного файла будет проигнорировано при выполнении Git команд.

Git активно используется для командной разработки, ситуация при которой разные
разработчики могут одновременно работать над функциями одного проекта в
контексте единого репозитория. Если бы разработчики в коменде всегда вносили
изменения в контексте одного рабочего пространства это приводило бы к
постоянным конфликтам, решить эту проблему позволяют ветки. Веткой в контексте
репозитория называется отдельно взятое рабочее пространство которое существует
паралельно с другими такими же ветками, каждая ветка обладает своей независимой
историей, изменения вносимые в одну ветку не будут отражаться на состоянии
другой ветки до момента их слияния. Каждая ветка имеет свою отправную точку
которой является точка сохранения исходной ветки (ветка на основании которой
будет создана новая) актуальная на момент создания новой. По умолчанию в
репозитории создаётся единственная базовая ветка зачастую с названием main либо
master (либо любым другим на усмотрение разработчика). Просмотреть список
актуальных в репозитории веток можно при помощи команды `git branch -v`.

`git branch <name>` - создаёт новую ветку с указанный названием история которой
будет начинаться от последней точки сохранения текущей ветки.

`git checkout <name>` - производит переключение на другую ветку по указанному
названию.

Со временем при работе над проектом встаёт необходимость объединения изменения
из разных веток в одну цельную историю, такая операция называется слиянием
(merge), при слиянии веток могут возникать конфликты что является нормой, они
могут быть решены как в автоматическом режиме так и в ручном которые трубет
действий от разработчика.

`git merge <name>` - сливает изменения из ветки с указанным названием в текущую
ветку (на которой находится репозиторий в момент выполнения команды).

Возможные варианты выполнения команды `git merge`:
1) Fast-forward - стратегия слияния при которой все точки сохранения из
сливаемой ветки напрямую переносятся в исходную ветку. Для слияние по типу
fast-forward необходимо чтобы исходная ветка не ушла вперёд с момента создания
сливаемой (последняя точка сохранения исходной ветки находится в сливаемой
ветке).
2) Auto-merge - страгия слияния которая применяется при внесении изменений как
в сливаемую, так и в сходную ветки. Для слияния по типу auto-merge важно чтобы
в сливаемых ветках не были затроны одинаковые файлы.














